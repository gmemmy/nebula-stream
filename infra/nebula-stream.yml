AWSTemplateFormatVersion: 2010-09-09
Description: Nebula Stream Phase 1 - Raw Ingestion Infra

Parameters:
  Environment:
    Type: String
    Description: Deployment environment (e.g., dev, prod)
  CryptoApiKey:
    Type: String
    Description: Cryptocurrency API key
  CryptoApiUrl:
    Type: String
    Description: Cryptocurrency API URL
  ArtifactsBucket:
    Type: String
    Description: S3 bucket where lambda code artifacts are stored
  CodeS3Key:
    Type: String
    Description: "S3 key (path) to the Lambda code zip file"

Resources:
  NebulaStreamRawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: "nebula-stream-raw-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
    # SSM Parameter to store the crypto API key securely
  NebulaStreamApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/nebula-stream/${Environment}/crypto-api-key"
      Description: "NebulaStream cryptocurrency API key (SecureString)"
      Type: String
      Tier: Standard
      DataType: text
      Value: 
        Ref: CryptoApiKey
  
  NebulaStreamLamdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: "nebula-stream-lambda-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: NebulaStreamLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  Fn::Sub: "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/nebula-stream/${Environment}/crypto-api-key"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Sub: "arn:aws:s3:::nebula-stream-raw-${Environment}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*" 
                  
  FetchPriceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: "nebula-stream-fetch-price-${Environment}"
      Runtime: python3.9
      Handler: handler.handler
      Role:
        Fn::GetAtt: [NebulaStreamLamdaRole, Arn]
      Code:
        S3Bucket: 
          Ref: ArtifactsBucket
        S3Key:
          Ref: CodeS3Key
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENV: 
            Ref: Environment
          CRYPTO_API_URL:
            Ref: CryptoApiUrl
          RAW_BUCKET:
            Ref: NebulaStreamRawBucket
          SSM_PARAMETER:
            Fn::Sub: "/nebula-stream/${Environment}/crypto-api-key"
              
  # EventBridge rule to schedule  the lambda every 5 minutes
  FetchPriceSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name:
        Fn::Sub: "nebula-stream-fetch-schedule-${Environment}"
      ScheduleExpression: "rate(5 minutes)"
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt: [FetchPriceFunction, Arn]
          Id: "FetchPriceFunctionTarget"
  
  # Permission for EventBridge to invoke the lambda
  PermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt: [FetchPriceFunction, Arn]
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: [FetchPriceSchedule, Arn]   

  # Glue Database for catalog
  NebulaStreamGlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId:
        Ref: AWS::AccountId
      DatabaseInput:
        Name:
          Fn::Sub: "nebula_stream_${Environment}_db"
        Description: "Glue database for NebulaStream"

  # IAM Role for Glue Crawler
  NebulaStreamGlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: "nebula-stream-glue-crawler-role-${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: GlueCrawlerS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - Fn::GetAtt: [NebulaStreamRawBucket, Arn]
                  - Fn::Sub: "arn:aws:s3:::nebula-stream-raw-${Environment}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - glue:CreateDatabase
                  - glue:GetDatabase
                  - glue:UpdateDatabase
                  - glue:CreateTable
                  - glue:UpdateTable
                Resource: "*"
              - Effect: Allow
                Action:
                  - glue:GetTable
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Glue Crawler for raw data
  NebulaStreamGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name:
        Fn::Sub: "nebula-stream-raw-crawler-${Environment}"
      Role:
        Fn::GetAtt: [NebulaStreamGlueCrawlerRole, Arn]
      DatabaseName:
        Ref: NebulaStreamGlueDatabase
      Targets:
        S3Targets:
          - Path:
              Fn::Sub: "s3://nebula-stream-raw-${Environment}-${AWS::AccountId}/"
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DEPRECATE_IN_DATABASE

Outputs:
  RawBucketName:
    Description: Name of the raw data S3 bucket
    Value: 
      Ref: NebulaStreamRawBucket

  ApiKeyParameterName:
    Description: SSM parameter path for the crypto API key
    Value: 
      Ref: NebulaStreamApiKeyParameter
